# This file can be used to configure the commands for compiling (and running) code in the various
# languages supported by ocimatic. Normally, you should be able to get everything working by
# installing the compilers/interpreters required for each language and having them in your `PATH`.
# If you have an unusual environement that doesn't match ocimatic expectations, editing this file
# gives you more fine-grained control.
#
# Note that some parts of ocimatic will still work even if some of these commands are not working.
# So you may be fine ignoring some parts of this file depending on how you want to use ocimatic.


# Command and flags to compile C++ files. Besides the flags specified in this file, the command is
# also invoked using the `-I` and `-o` flags. Solutions in C++ are the most common so you better
# have this properly configured.
[cpp]
command = "g++"
flags = ["-O2", "-std=c++17"]


# Command to interpret python files. Generator scripts are typically written in python so you may
# want to configure this or otherwise testplans will fail to run.
[python]
command = "python3"


# Commands to compile and run java files. Java is only used for solutions, so you should be able to
# use most of ocimatic without configuring this.
[java]
# This command is invoked using the `-d` flag to specify the output directory.
javac = "javac"
# This command is invoked with the `-cp` flag to specify the classpath as the output directory used
# for the `javac` command.
jre = "java"


# Command and flags to compile rust files. Rust solutions are rare so you may be good without
# configuring this. However, we sometime write checkers in rust. If you are working in a solution
# for a task that has a rust checker, you will need to have this working.
[rust]
command = "rustc"
flags = ["--edition=2021", "-O"]


# Command and flags to compile a latex file into a pdf. Typically, you can work on an statement by
# compiling the file in isolation using your preferred choice. Thus, one rarely needs to compile
# latex through ocimatic unless you want to generate the final problemset.
[latex]
command = "texfot"
flags = ["pdflatex", "-shell-escape", "-file-line-error"]
